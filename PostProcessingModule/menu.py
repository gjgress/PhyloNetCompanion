import os
import sys
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5 import QtCore

import PostProcessingModule.PNetworkMP
import PostProcessingModule.PNetworkML
import PostProcessingModule.PNetworkMPL
import PostProcessingModule.PMCMCGT
import PostProcessingModule.PMCMCSEQ
import PostProcessingModule.PMCMCBi
import PostProcessingModule.PMLEBi


def resource_path(relative_path):
    """
    Refer to the location of a resource file at run-time.
    This function is taken from
    https://www.reddit.com/r/learnpython/comments/4kjie3/how_to_include_gui_images_with_pyinstaller/
    For more information, visit https://pythonhosted.org/PyInstaller/runtime-information.html#run-time-information
    """
    if hasattr(sys, '_MEIPASS'):
        return os.path.join(sys._MEIPASS, relative_path)
    return os.path.join(os.path.abspath("."), relative_path)


class MenuPage(QMainWindow):
    def __init__(self):
        super(MenuPage, self).__init__()

        self.initUI()

    def initUI(self):
        """
        Initialize GUI.
        """
        wid = QWidget()
        self.setCentralWidget(wid)

        # Menubar and action
        aboutAction = QAction('About', self)
        aboutAction.triggered.connect(self.aboutMessage)
        aboutAction.setShortcut("Ctrl+A")

        menubar = self.menuBar()
        menuMenu = menubar.addMenu('Menu')
        menuMenu.addAction(aboutAction)

        # Queston labels
        questionLabel = QLabel()
        questionLabel.setText("Please select a method:")
        questionLabel.setWordWrap(True)

        uploadFileLbl = QLabel()
        uploadFileLbl.setText("Please upload a .xml file \ngenerated by the above method:")

        questionFont = QFont()
        questionFont.setPointSize(24)
        questionFont.setFamily("Copperplate")
        questionLabel.setFont(questionFont)  # Font of the question label.
        uploadFileLbl.setFont(questionFont)

        # MCMC credible set labels:
        mcmcLabel = QLabel()
        mcmcLabel.setText("(For MCMC methods only) Please upload CredibleSet.xml here:")

        mcmcFont = QFont()
        mcmcFont.setBold(True)
        mcmcFont.setFamily("Times New Roman")
        mcmcLabel.setFont(mcmcFont)

        # Drop-down menu of commands
        self.methods = QComboBox(self)
        self.methods.addItem("InferNetwork_MP")
        self.methods.addItem("InferNetwork_ML")
        self.methods.addItem("InferNetwork_MPL")
        self.methods.addItem("MCMC_GT")
        self.methods.addItem("MCMC_SEQ")
        self.methods.addItem("MCMC_BiMarkers")
        self.methods.addItem("MLE_BiMarkers")

        # Two QLineEdits for input files
        self.fileEdit = QLineEdit()
        self.fileBtn = QToolButton()
        self.fileBtn.setText("...")
        self.fileBtn.clicked.connect(self.selectFile)

        self.mcmcFileEdit = QLineEdit()
        self.mcmcFileBtn = QToolButton()
        self.mcmcFileBtn.setText("...")
        self.mcmcFileBtn.clicked.connect(self.selectMcmcFile)

        # Launch button
        launchBtn = QPushButton("Launch", self)
        launchBtn.clicked.connect(self.launch)

        # Image and Title
        pix = QPixmap(resource_path("logo.png"))
        image = QLabel(self)
        image.setPixmap(pix)
        lbl = QLabel("PhyloNet")

        titleFont = QFont()
        titleFont.setPointSize(24)
        titleFont.setBold(True)
        lbl.setFont(titleFont)  # Font of the PhyloNet title.

        # Separation line
        line = QFrame(self)
        line.setFrameShape(QFrame.HLine)
        line.setFrameShadow(QFrame.Sunken)

        line2 = QFrame(self)
        line2.setFrameShape(QFrame.HLine)
        line2.setFrameShadow(QFrame.Sunken)

        # Layouts
        # Top level logo and title.
        top = QHBoxLayout()
        top.addWidget(image)
        top.addWidget(lbl)

        fileSelectionLayout = QHBoxLayout()
        fileSelectionLayout.addWidget(self.fileEdit)
        fileSelectionLayout.addWidget(self.fileBtn)

        mcmcFileSelectionLayout = QHBoxLayout()
        mcmcFileSelectionLayout.addWidget(self.mcmcFileEdit)
        mcmcFileSelectionLayout.addWidget(self.mcmcFileBtn)

        # Main vertical layout.
        vbox = QVBoxLayout()
        vbox.addLayout(top)
        vbox.addWidget(line)
        vbox.addWidget(questionLabel)
        vbox.addWidget(self.methods)
        vbox.addWidget(uploadFileLbl)
        vbox.addLayout(fileSelectionLayout)
        vbox.addWidget(line2)
        vbox.addWidget(mcmcLabel)
        vbox.addLayout(mcmcFileSelectionLayout)
        vbox.addWidget(launchBtn)
        wid.setLayout(vbox)

        vbox.setContentsMargins(50, 10, 50, 10)

        menubar.setNativeMenuBar(False)
        self.setWindowTitle('PhyloNetOutputSummarizer')
        self.setWindowIcon(QIcon(resource_path("logo.png")))

    def aboutMessage(self):
        msg = QMessageBox()
        msg.setIcon(QMessageBox.Information)
        msg.setText("PhyloNet is a tool designed mainly for analyzing, "
                    "reconstructing, and evaluating reticulate "
                    "(or non-treelike) evolutionary relationships, "
                    "generally known as phylogenetic networks. Various "
                    "methods that we have developed make use of techniques "
                    "and tools from the domain of phylogenetic trees, and "
                    "hence the PhyloNet package includes several tools for "
                    "phylogenetic tree analysis. PhyloNet is released under "
                    "the GNU General Public License. \n\nPhyloNet is designed, "
                    "implemented, and maintained by Rice's BioInformatics Group, "
                    "which is lead by Professor Luay Nakhleh (nakhleh@cs.rice.edu). "
                    "For more details related to this group please visit "
                    "http://bioinfo.cs.rice.edu.")
        font = QFont()
        font.setPointSize(13)
        font.setFamily("Times New Roman")
        font.setBold(False)

        msg.setFont(font)
        msg.exec_()

    def selectFile(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file', '/')
        if fname:
            self.fileEdit.setText(fname)

    def selectMcmcFile(self):
        fname = QFileDialog.getOpenFileName(self, 'Open file', '/')
        if fname:
            self.mcmcFileEdit.setText(fname)

    def launch(self):
        class emptyFileError(Exception):
            pass

        class wrongTypeError(Exception):
            pass

        try:
            if self.fileEdit.text().isEmpty():
                raise emptyFileError

            if os.path.splitext(str(self.fileEdit.text()))[1] != ".xml":
                raise wrongTypeError

            if str(self.methods.currentText()) == "InferNetwork_MP":
                self.displayPage = PNetworkMP.PNetworkMPPage(str(self.fileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "InferNetwork_ML":
                self.displayPage = PNetworkML.PNetworkMLPage(str(self.fileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "InferNetwork_MPL":
                self.displayPage = PNetworkMPL.PNetworkMPLPage(str(self.fileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "MCMC_GT":
                if self.mcmcFileEdit.text().isEmpty():
                    raise emptyFileError
                if os.path.splitext(str(self.mcmcFileEdit.text()))[1] != ".xml":
                    raise wrongTypeError

                self.displayPage = PMCMCGT.PMCMCGTPage(str(self.fileEdit.text()), str(self.mcmcFileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "MCMC_SEQ":
                if self.mcmcFileEdit.text().isEmpty():
                    raise emptyFileError
                if os.path.splitext(str(self.mcmcFileEdit.text()))[1] != ".xml":
                    raise wrongTypeError

                self.displayPage = PMCMCSEQ.PMCMCSEQPage(str(self.fileEdit.text()), str(self.mcmcFileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "MCMC_BiMarkers":
                if self.mcmcFileEdit.text().isEmpty():
                    raise emptyFileError
                if os.path.splitext(str(self.mcmcFileEdit.text()))[1] != ".xml":
                    raise wrongTypeError

                self.displayPage = PMCMCBi.PMCMCBiPage(str(self.fileEdit.text()), str(self.mcmcFileEdit.text()), self)
                self.displayPage.show()
            elif str(self.methods.currentText()) == "MLE_BiMarkers":
                self.displayPage = PMLEBi.PMLEBiPage(str(self.fileEdit.text()), self)
                self.displayPage.show()

        except emptyFileError:
            QMessageBox.warning(self, "Warning", "Please upload required file!", QMessageBox.Ok)
            return
        except wrongTypeError:
            QMessageBox.warning(self, "Warning", "Please upload .only xml file!", QMessageBox.Ok)
            return
        except RuntimeError:
            QMessageBox.warning(self, "Warning", "Please upload .xml file generated by %s!"
                                % str(self.methods.currentText()), QMessageBox.Ok)
        # except Exception:
        #     QMessageBox.warning(self, "Warning", "Please upload valid .xml file generated by PhyloNet!", QMessageBox.Ok)
        #     return


if __name__ == '__main__':
    app = QApplication(sys.argv)
    ex = MenuPage()
    ex.show()
    sys.exit(app.exec_())
